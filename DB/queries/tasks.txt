/*Get information about all books*/
SELECT *
from book
join author_book ab on book.id = ab.fk_book
order by book.id;



/*Check if needed book is available*/
SELECT title, copy_number,
       IF(copy_number = 0, 'unavailable', 'available')
from book
where title='Twilight';

/*Get the most unpopular books in selected period*/
SELECT title,COUNT(book.title) AS CountRequest
       from book
 JOIN user_book on book.id  = user_book.fk_book
WHERE user_book.rent_date between '2000-01-01 00:00:00' and '2005-01-01 00:00:00'
GROUP BY book.title
ORDER BY book.title DESC
LIMIT    1;



/*Find books by main author*/
select deploy_date, title, copy_number
from book
join author_book ab on book.id = ab.fk_book
where fk_author=2;

/*Find books by  co-author*/
select deploy_date, title, copy_number
from book
         join author_book ab on book.id = ab.fk_book
where ab.status = true;

/*Find book by title*/
select *
from book
join author_book ab on book.id = ab.fk_book
where title like 'Harry Potter%';


/*"Set title of book and display count of this Bookâ€™ copies with information
about them (available/unavailable in Library)"*/
Set @title = 'Twilight';
set @genId = (SELECT id from book where title = @title);
set @reqId = (SELECT fk_book  from user_book where fk_book = @genId and return_date IS NULL);
Set @copies = (Select copy_number from book where id = @genId) - (Select count(id) from book where id = @reqId);
Set @available = (select if (@copies > 0, true, false));



-- get books which user has read
SELECT user.name, user.surname, book.title  
FROM user_book
JOIN user ON user_book.fk_user = user.id_user
JOIN book ON user_book.fk_book = book.id_book
WHERE return_date IS NOT NULL
GROUP BY id_user;

-- get books which user is reading
SELECT user.name, user.surname, book.title  
FROM user_book
JOIN user ON user_book.fk_user = user.id_user
JOIN book ON user_book.fk_book = book.id_book
WHERE return_date IS NULL
AND should_return_date IS NOT NULL
GROUP BY id_user;

-- age of readers
SELECT name, surname, 
DATEDIFF(birth_date, CURDATE()) / 365.25 * -1
AS avAge
FROM user
WHERE user_role = 1;

-- return book not in time
SELECT user.id_user, user.name, user.surname, user.registration_date,
user.birth_date, user.email, user.password, user_book.return_date, 
user_book.rent_date, user_book.should_return_date
FROM user
JOIN user_book ON user.id_user = user_book.fk_user
WHERE user_book.return_date > user_book.should_return_date;



/*How many books were given in selected period?*/
SELECT
    count(b.id) as Given
FROM  book b
          join user_book ub on b.id = ub.fk_book
where ub.rent_date between '2020-01-01 00:00:00' and now();


/*Request needed book */
INSERT INTO user_book VALUES (id_user, id_book, 3, null, null, null)

/*Get his/her statistics (how many and how long books were been read, reading now)*/
SELECT user.name, user.surname, book.title, rent_date, return_date
FROM user_book
JOIN user ON user_book.fk_user = user.id_user
JOIN book ON user_book.fk_book = book.id_book
WHERE return_date IS NOT NULL
GROUP BY id_user;

SELECT user.name, user.surname, book.title, rent_date
FROM user_book
JOIN user ON user_book.fk_user = user.id_user
JOIN book ON user_book.fk_book = book.id_book
WHERE return_date IS NULL
GROUP BY id_user;

/*Get the most popular books in selected period*/
SELECT title,COUNT(book.title) AS CountRequest
       from book
 JOIN user_book on book.id  = user_book.fk_book
WHERE user_book.rent_date between 'first_date' and 'second_date'
GROUP BY book.title
ORDER BY book.title
LIMIT    1;